package com.birdcopy.BirdCopyApp.Component.ActiveDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BE__LOCAL__LESSON.
*/
public class BE_LOCAl_LESSONDao extends AbstractDao<BE_LOCAl_LESSON, Long> {

    public static final String TABLENAME = "BE__LOCAL__LESSON";

    /**
     * Properties of entity BE_LOCAl_LESSON.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BEUSERID = new Property(1, String.class, "BEUSERID", false, "BEUSERID");
        public final static Property BELESSONID = new Property(2, String.class, "BELESSONID", false, "BELESSONID");
        public final static Property BESTAMP = new Property(3, double.class, "BESTAMP", false, "BESTAMP");
        public final static Property BELOCALCOVER = new Property(4, String.class, "BELOCALCOVER", false, "BELOCALCOVER");
        public final static Property BETIME = new Property(5, Integer.class, "BETIME", false, "BETIME");
    };


    public BE_LOCAl_LESSONDao(DaoConfig config) {
        super(config);
    }
    
    public BE_LOCAl_LESSONDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BE__LOCAL__LESSON' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BEUSERID' TEXT NOT NULL ," + // 1: BEUSERID
                "'BELESSONID' TEXT NOT NULL ," + // 2: BELESSONID
                "'BESTAMP' REAL NOT NULL ," + // 3: BESTAMP
                "'BELOCALCOVER' TEXT," + // 4: BELOCALCOVER
                "'BETIME' INTEGER);"); // 5: BETIME
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BE__LOCAL__LESSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BE_LOCAl_LESSON entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBEUSERID());
        stmt.bindString(3, entity.getBELESSONID());
        stmt.bindDouble(4, entity.getBESTAMP());
 
        String BELOCALCOVER = entity.getBELOCALCOVER();
        if (BELOCALCOVER != null) {
            stmt.bindString(5, BELOCALCOVER);
        }
 
        Integer BETIME = entity.getBETIME();
        if (BETIME != null) {
            stmt.bindLong(6, BETIME);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BE_LOCAl_LESSON readEntity(Cursor cursor, int offset) {
        BE_LOCAl_LESSON entity = new BE_LOCAl_LESSON( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // BEUSERID
            cursor.getString(offset + 2), // BELESSONID
            cursor.getDouble(offset + 3), // BESTAMP
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BELOCALCOVER
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // BETIME
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BE_LOCAl_LESSON entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBEUSERID(cursor.getString(offset + 1));
        entity.setBELESSONID(cursor.getString(offset + 2));
        entity.setBESTAMP(cursor.getDouble(offset + 3));
        entity.setBELOCALCOVER(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBETIME(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BE_LOCAl_LESSON entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BE_LOCAl_LESSON entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
