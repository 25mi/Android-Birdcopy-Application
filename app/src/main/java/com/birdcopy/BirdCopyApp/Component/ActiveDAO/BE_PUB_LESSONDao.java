package com.birdcopy.BirdCopyApp.Component.ActiveDAO;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BE__PUB__LESSON.
*/
public class BE_PUB_LESSONDao extends AbstractDao<BE_PUB_LESSON, Long> {

    public static final String TABLENAME = "BE__PUB__LESSON";

    /**
     * Properties of entity BE_PUB_LESSON.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BELESSONID = new Property(1, String.class, "BELESSONID", false, "BELESSONID");
        public final static Property BETITLE = new Property(2, String.class, "BETITLE", false, "BETITLE");
        public final static Property BEDESC = new Property(3, String.class, "BEDESC", false, "BEDESC");
        public final static Property BEIMAGEURL = new Property(4, String.class, "BEIMAGEURL", false, "BEIMAGEURL");
        public final static Property BECONTENTURL = new Property(5, String.class, "BECONTENTURL", false, "BECONTENTURL");
        public final static Property BESUBURL = new Property(6, String.class, "BESUBURL", false, "BESUBURL");
        public final static Property BEDURATION = new Property(7, Double.class, "BEDURATION", false, "BEDURATION");
        public final static Property BESTARTTIME = new Property(8, Double.class, "BESTARTTIME", false, "BESTARTTIME");
        public final static Property BELESSONS = new Property(9, Integer.class, "BELESSONS", false, "BELESSONS");
        public final static Property BEDLPERCENT = new Property(10, Double.class, "BEDLPERCENT", false, "BEDLPERCENT");
        public final static Property BEDLSTATE = new Property(11, Boolean.class, "BEDLSTATE", false, "BEDLSTATE");
        public final static Property BEOFFICIAL = new Property(12, Boolean.class, "BEOFFICIAL", false, "BEOFFICIAL");
        public final static Property BEPROURL = new Property(13, String.class, "BEPROURL", false, "BEPROURL");
        public final static Property BELEVEL = new Property(14, String.class, "BELEVEL", false, "BELEVEL");
        public final static Property BECONTENTTYPE = new Property(15, String.class, "BECONTENTTYPE", false, "BECONTENTTYPE");
        public final static Property BEDOWNLOADTYPE = new Property(16, String.class, "BEDOWNLOADTYPE", false, "BEDOWNLOADTYPE");
        public final static Property BETAG = new Property(17, String.class, "BETAG", false, "BETAG");
        public final static Property BEWEBURL = new Property(18, String.class, "BEWEBURL", false, "BEWEBURL");
        public final static Property BEISBN = new Property(19, String.class, "BEISBN", false, "BEISBN");
        public final static Property BECoinPrice = new Property(20, Integer.class, "BECoinPrice", false, "BECOIN_PRICE");
        public final static Property BERELATIVEURL = new Property(21, String.class, "BERELATIVEURL", false, "BERELATIVEURL");
        public final static Property LocalURLOfContent = new Property(22, String.class, "localURLOfContent", false, "LOCAL_URLOF_CONTENT");
        public final static Property LocalURLOfSub = new Property(23, String.class, "localURLOfSub", false, "LOCAL_URLOF_SUB");
        public final static Property LocalURLOfCover = new Property(24, String.class, "localURLOfCover", false, "LOCAL_URLOF_COVER");
        public final static Property LocalURLOfPro = new Property(25, String.class, "localURLOfPro", false, "LOCAL_URLOF_PRO");
        public final static Property LocalURLOfRelative = new Property(26, String.class, "localURLOfRelative", false, "LOCAL_URLOF_RELATIVE");
    };


    public BE_PUB_LESSONDao(DaoConfig config) {
        super(config);
    }
    
    public BE_PUB_LESSONDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BE__PUB__LESSON' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BELESSONID' TEXT NOT NULL ," + // 1: BELESSONID
                "'BETITLE' TEXT," + // 2: BETITLE
                "'BEDESC' TEXT," + // 3: BEDESC
                "'BEIMAGEURL' TEXT," + // 4: BEIMAGEURL
                "'BECONTENTURL' TEXT," + // 5: BECONTENTURL
                "'BESUBURL' TEXT," + // 6: BESUBURL
                "'BEDURATION' REAL," + // 7: BEDURATION
                "'BESTARTTIME' REAL," + // 8: BESTARTTIME
                "'BELESSONS' INTEGER," + // 9: BELESSONS
                "'BEDLPERCENT' REAL," + // 10: BEDLPERCENT
                "'BEDLSTATE' INTEGER," + // 11: BEDLSTATE
                "'BEOFFICIAL' INTEGER," + // 12: BEOFFICIAL
                "'BEPROURL' TEXT," + // 13: BEPROURL
                "'BELEVEL' TEXT," + // 14: BELEVEL
                "'BECONTENTTYPE' TEXT," + // 15: BECONTENTTYPE
                "'BEDOWNLOADTYPE' TEXT," + // 16: BEDOWNLOADTYPE
                "'BETAG' TEXT," + // 17: BETAG
                "'BEWEBURL' TEXT," + // 18: BEWEBURL
                "'BEISBN' TEXT," + // 19: BEISBN
                "'BECOIN_PRICE' INTEGER," + // 20: BECoinPrice
                "'BERELATIVEURL' TEXT," + // 21: BERELATIVEURL
                "'LOCAL_URLOF_CONTENT' TEXT," + // 22: localURLOfContent
                "'LOCAL_URLOF_SUB' TEXT," + // 23: localURLOfSub
                "'LOCAL_URLOF_COVER' TEXT," + // 24: localURLOfCover
                "'LOCAL_URLOF_PRO' TEXT," + // 25: localURLOfPro
                "'LOCAL_URLOF_RELATIVE' TEXT);"); // 26: localURLOfRelative
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BE__PUB__LESSON'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BE_PUB_LESSON entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getBELESSONID());
 
        String BETITLE = entity.getBETITLE();
        if (BETITLE != null) {
            stmt.bindString(3, BETITLE);
        }
 
        String BEDESC = entity.getBEDESC();
        if (BEDESC != null) {
            stmt.bindString(4, BEDESC);
        }
 
        String BEIMAGEURL = entity.getBEIMAGEURL();
        if (BEIMAGEURL != null) {
            stmt.bindString(5, BEIMAGEURL);
        }
 
        String BECONTENTURL = entity.getBECONTENTURL();
        if (BECONTENTURL != null) {
            stmt.bindString(6, BECONTENTURL);
        }
 
        String BESUBURL = entity.getBESUBURL();
        if (BESUBURL != null) {
            stmt.bindString(7, BESUBURL);
        }
 
        Double BEDURATION = entity.getBEDURATION();
        if (BEDURATION != null) {
            stmt.bindDouble(8, BEDURATION);
        }
 
        Double BESTARTTIME = entity.getBESTARTTIME();
        if (BESTARTTIME != null) {
            stmt.bindDouble(9, BESTARTTIME);
        }
 
        Integer BELESSONS = entity.getBELESSONS();
        if (BELESSONS != null) {
            stmt.bindLong(10, BELESSONS);
        }
 
        Double BEDLPERCENT = entity.getBEDLPERCENT();
        if (BEDLPERCENT != null) {
            stmt.bindDouble(11, BEDLPERCENT);
        }
 
        Boolean BEDLSTATE = entity.getBEDLSTATE();
        if (BEDLSTATE != null) {
            stmt.bindLong(12, BEDLSTATE ? 1l: 0l);
        }
 
        Boolean BEOFFICIAL = entity.getBEOFFICIAL();
        if (BEOFFICIAL != null) {
            stmt.bindLong(13, BEOFFICIAL ? 1l: 0l);
        }
 
        String BEPROURL = entity.getBEPROURL();
        if (BEPROURL != null) {
            stmt.bindString(14, BEPROURL);
        }
 
        String BELEVEL = entity.getBELEVEL();
        if (BELEVEL != null) {
            stmt.bindString(15, BELEVEL);
        }
 
        String BECONTENTTYPE = entity.getBECONTENTTYPE();
        if (BECONTENTTYPE != null) {
            stmt.bindString(16, BECONTENTTYPE);
        }
 
        String BEDOWNLOADTYPE = entity.getBEDOWNLOADTYPE();
        if (BEDOWNLOADTYPE != null) {
            stmt.bindString(17, BEDOWNLOADTYPE);
        }
 
        String BETAG = entity.getBETAG();
        if (BETAG != null) {
            stmt.bindString(18, BETAG);
        }
 
        String BEWEBURL = entity.getBEWEBURL();
        if (BEWEBURL != null) {
            stmt.bindString(19, BEWEBURL);
        }
 
        String BEISBN = entity.getBEISBN();
        if (BEISBN != null) {
            stmt.bindString(20, BEISBN);
        }
 
        Integer BECoinPrice = entity.getBECoinPrice();
        if (BECoinPrice != null) {
            stmt.bindLong(21, BECoinPrice);
        }
 
        String BERELATIVEURL = entity.getBERELATIVEURL();
        if (BERELATIVEURL != null) {
            stmt.bindString(22, BERELATIVEURL);
        }
 
        String localURLOfContent = entity.getLocalURLOfContent();
        if (localURLOfContent != null) {
            stmt.bindString(23, localURLOfContent);
        }
 
        String localURLOfSub = entity.getLocalURLOfSub();
        if (localURLOfSub != null) {
            stmt.bindString(24, localURLOfSub);
        }
 
        String localURLOfCover = entity.getLocalURLOfCover();
        if (localURLOfCover != null) {
            stmt.bindString(25, localURLOfCover);
        }
 
        String localURLOfPro = entity.getLocalURLOfPro();
        if (localURLOfPro != null) {
            stmt.bindString(26, localURLOfPro);
        }
 
        String localURLOfRelative = entity.getLocalURLOfRelative();
        if (localURLOfRelative != null) {
            stmt.bindString(27, localURLOfRelative);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BE_PUB_LESSON readEntity(Cursor cursor, int offset) {
        BE_PUB_LESSON entity = new BE_PUB_LESSON( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // BELESSONID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // BETITLE
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BEDESC
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // BEIMAGEURL
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // BECONTENTURL
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // BESUBURL
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // BEDURATION
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // BESTARTTIME
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // BELESSONS
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // BEDLPERCENT
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // BEDLSTATE
            cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0, // BEOFFICIAL
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // BEPROURL
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // BELEVEL
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // BECONTENTTYPE
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // BEDOWNLOADTYPE
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // BETAG
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // BEWEBURL
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // BEISBN
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // BECoinPrice
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // BERELATIVEURL
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // localURLOfContent
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // localURLOfSub
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // localURLOfCover
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // localURLOfPro
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26) // localURLOfRelative
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BE_PUB_LESSON entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBELESSONID(cursor.getString(offset + 1));
        entity.setBETITLE(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBEDESC(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBEIMAGEURL(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBECONTENTURL(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBESUBURL(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBEDURATION(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setBESTARTTIME(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBELESSONS(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setBEDLPERCENT(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setBEDLSTATE(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setBEOFFICIAL(cursor.isNull(offset + 12) ? null : cursor.getShort(offset + 12) != 0);
        entity.setBEPROURL(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setBELEVEL(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBECONTENTTYPE(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setBEDOWNLOADTYPE(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setBETAG(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setBEWEBURL(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setBEISBN(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setBECoinPrice(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setBERELATIVEURL(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLocalURLOfContent(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setLocalURLOfSub(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setLocalURLOfCover(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setLocalURLOfPro(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setLocalURLOfRelative(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BE_PUB_LESSON entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BE_PUB_LESSON entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
